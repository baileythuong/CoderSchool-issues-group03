export default [
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13525",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13525/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13525/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13525/events",
      "html_url": "https://github.com/facebook/react/issues/13525",
      "id": 356103592,
      "node_id": "MDU6SXNzdWUzNTYxMDM1OTI=",
      "number": 13525,
      "title": "React Fire: Modernizing React DOM",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 270986513,
          "node_id": "MDU6TGFiZWwyNzA5ODY1MTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
          "name": "Type: Big Picture",
          "color": "61dafb",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 220,
      "created_at": "2018-08-31T19:45:53Z",
      "updated_at": "2019-09-26T02:10:52Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "\r\n-------------\r\n\r\n**For latest status, see an update from June 5th, 2019: https://github.com/facebook/react/issues/13525#issuecomment-499196939**\r\n\r\n-------------\r\n\r\nThis year, the React team has mostly been focused on [fundamental improvements to React](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html).\r\n\r\nAs this work is getting closer to completion, we're starting to think of what the next major releases of React DOM should look like. There are quite a few [known problems](https://github.com/facebook/react/issues?q=is%3Aopen+is%3Aissue+label%3A%22Type%3A+Bug%22+label%3A%22Component%3A+DOM%22), and some of them are hard or impossible to fix without bigger internal changes.\r\n\r\nWe want to undo past mistakes that caused countless follow-up fixes and created much technical debt. We also want to remove some of the abstraction in the event system which has been virtually untouched since the first days of React, and is a source of much complexity and bundle size.\r\n\r\nWe're calling this effort \"React Fire\".\r\n\r\n### 🔥 React Fire \r\n\r\n**React Fire** is an effort to modernize React DOM. Our goal is to make React better aligned with how the DOM works, revisit some controversial past decisions that led to problems, and make React smaller and faster.\r\n\r\nWe want to ship this set of changes in a future React major release because some of them will unfortunately be breaking. Nevertheless, we think they're worth it. And we have more than 50 thousands components at Facebook to keep us honest about our migration strategy. We can't afford to rewrite product code except a few targeted fixes or automated codemods. \r\n\r\n### Strategy\r\n\r\nThere are a few different things that make up our current plan. We might add or remove something but here's the thinking so far:\r\n\r\n* **Stop reflecting input values in the `value` attribute (https://github.com/facebook/react/issues/11896).** This was originally added in React 15.2.0 via https://github.com/facebook/react/pull/6406. It was very commonly requested because people's conceptual model of the DOM is that the `value` they see in the DOM inspector should match the `value` JSX attribute. But that's not how the DOM works. When you type into a field, the browser doesn't update the `value` attribute. React shouldn't do it either. It turned out that this change, while probably helpful for some code relying on CSS selectors, caused a cascade of bugs — some of them still unfixed to this day. Some of the fallout from this change includes: https://github.com/facebook/react/issues/7179, https://github.com/facebook/react/issues/8395, https://github.com/facebook/react/issues/7328, https://github.com/facebook/react/issues/7233, https://github.com/facebook/react/issues/11881, https://github.com/facebook/react/issues/7253, https://github.com/facebook/react/pull/9584, https://github.com/facebook/react/pull/9806, https://github.com/facebook/react/pull/9714, https://github.com/facebook/react/pull/11534, https://github.com/facebook/react/pull/11746, https://github.com/facebook/react/pull/12925. At this point it's clearly not worth it to keep fighting the browser, and we should revert it. The positive part of this journey is that thanks to tireless work from our DOM contributors (@nhunzaker, @aweary, @jquense, and @philipp-spiess) we now have detailed DOM test fixtures that will help us avoid regressions.\r\n\r\n* **Attach events at the React root rather than the document (https://github.com/facebook/react/issues/2043).** Attaching event handlers to the document becomes an issue when embedding React apps into larger systems. The Atom editor was one of the first cases that bumped into this. Any big website also eventually develops very complex edge cases related to `stopPropagation` interacting with non-React code or across React roots (https://github.com/facebook/react/issues/8693, https://github.com/facebook/react/pull/8117, https://github.com/facebook/react/issues/12518). We will also want to attach events eagerly to every root so that we can do less runtime checks during updates.\r\n\r\n* **Migrate from `onChange` to `onInput` and don’t polyfill it for uncontrolled components (https://github.com/facebook/react/issues/9657).** See the linked issue for a detailed plan. It has been confusing that React uses a different event name for what's known as `input` event in the DOM. While we generally avoid making big changes like this without significant benefit, in this case we *also* want to change the behavior to remove some complexity that's only necessary for edge cases like mutating controlled inputs. So it makes sense to do these two changes together, and use that as an opportunity to make `onInput` and `onChange` work exactly how the DOM events do for uncontrolled components.\r\n\r\n* **Drastically simplify the event system (https://github.com/facebook/react/issues/4751).** The current event system has barely changed since its initial implementation in 2013. It is reused across React DOM and React Native, so it is unnecessarily abstract. Many of the polyfills it provides are unnecessary for modern browsers, and some of them create more issues than they solve. It also accounts for a significant portion of the React DOM bundle size. We don't have a very specific plan here, but we will probably fork the event system completely, and then see how minimal we can make it if we stick closer to what the DOM gives us. It's plausible that we'll get rid of synthetic events altogether. We should stop bubbling events like media events which don’t bubble in the DOM and don’t have a good reason to bubble. We want to retain some React-specific capabilities like bubbling through portals, but we will attempt to do this via simpler means (e.g. re-dispatching the event). Passive events will likely be a part of this. \r\n\r\n* **`className` → `class` (https://github.com/facebook/react/issues/4331, see also https://github.com/facebook/react/issues/13525#issuecomment-417818906 below).** This has been proposed countless times. We're already allowing passing `class` down to the DOM node in React 16. The confusion this is creating is not worth the syntax limitations it's trying to protect against. We wouldn't do this change by itself, but combined with everything else above it makes sense. Note we can’t just allow both without warnings because this makes it very difficult for a component ecosystem to handle. Each component would need to learn to handle both correctly, and there is a risk of them conflicting. Since many components process `className` (for example by appending to it), it’s too error-prone.\r\n\r\n### Tradeoffs\r\n\r\n* We can't make some of these changes if we aim to keep exposing the current private React event system APIs for projects like React Native Web. However, React Native Web will need a different strategy regardless because [React Fabric](http://facebook.github.io/react-native/blog/2018/06/14/state-of-react-native-2018) will likely move more of the responder system to the native side.\r\n\r\n* We may need to drop compatibility with some older browsers, and/or require more standalone polyfills for them. We still care about supporting IE11 but it's possible that we will not attempt to smooth over some of the existing browser differences — which is the stance taken by many modern UI libraries.\r\n\r\n### Rollout Plan\r\n\r\nAt this stage, the project is very exploratory. We don't know for sure if all of the above things will pan out. Because the changes are significant, we will need to dogfood them at Facebook, and try them out in a gradual fashion. This means we'll introduce a feature flag, fork some of the code, and keep it enabled at Facebook for a small group of people. The open source 16.x releases will keep the old behavior, but on master you will be able to run it with the feature flag on.\r\n\r\nI plan to work on the project myself for the most part, but I would very much appreciate more discussion and contributions from @nhunzaker, @aweary, @jquense, and @philipp-spiess who have been stellar collaborators and have largely steered React DOM while we were working on Fiber. If there's some area you're particularly interested in, please let me know and we'll work it out.\r\n\r\nThere are likely things that I missed in this plan. I'm very open to feedback, and I hope this writeup is helpful."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13991",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13991/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13991/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13991/events",
      "html_url": "https://github.com/facebook/react/issues/13991",
      "id": 374587589,
      "node_id": "MDU6SXNzdWUzNzQ1ODc1ODk=",
      "number": 13991,
      "title": "Hooks + multiple instances of React",
      "user": {
        "login": "brunolemos",
        "id": 619186,
        "node_id": "MDQ6VXNlcjYxOTE4Ng==",
        "avatar_url": "https://avatars1.githubusercontent.com/u/619186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunolemos",
        "html_url": "https://github.com/brunolemos",
        "followers_url": "https://api.github.com/users/brunolemos/followers",
        "following_url": "https://api.github.com/users/brunolemos/following{/other_user}",
        "gists_url": "https://api.github.com/users/brunolemos/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brunolemos/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brunolemos/subscriptions",
        "organizations_url": "https://api.github.com/users/brunolemos/orgs",
        "repos_url": "https://api.github.com/users/brunolemos/repos",
        "events_url": "https://api.github.com/users/brunolemos/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brunolemos/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1109410193,
          "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
          "name": "Component: Hooks",
          "color": "c2f27b",
          "default": false
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 151,
      "created_at": "2018-10-27T00:34:08Z",
      "updated_at": "2019-10-23T09:50:18Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "# To people coming from search: please [read this page first](https://reactjs.org/warnings/invalid-hook-call-warning.html). It contains most common possible fixes!\r\n\r\n\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nEnhancement\r\n\r\n**What is the current behavior?**\r\n\r\nI had multiple instances of React by mistake.\r\n\r\nWhen trying to use hooks, got this error:\r\n`hooks can only be called inside the body of a function component`\r\n\r\nWhich is not correct since I was using function components. Took me a while to find the real cause of the issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nShow the correct error message. Maybe detect that the app has multiple instances of React and say that it may be the reason of bugs. "
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/1739",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/1739/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/1739/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/1739/events",
      "html_url": "https://github.com/facebook/react/issues/1739",
      "id": 36379404,
      "node_id": "MDU6SXNzdWUzNjM3OTQwNA==",
      "number": 1739,
      "title": "Support asynchronous server rendering (waiting for data before rendering)",
      "user": {
        "login": "fdecampredon",
        "id": 864201,
        "node_id": "MDQ6VXNlcjg2NDIwMQ==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/864201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fdecampredon",
        "html_url": "https://github.com/fdecampredon",
        "followers_url": "https://api.github.com/users/fdecampredon/followers",
        "following_url": "https://api.github.com/users/fdecampredon/following{/other_user}",
        "gists_url": "https://api.github.com/users/fdecampredon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fdecampredon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fdecampredon/subscriptions",
        "organizations_url": "https://api.github.com/users/fdecampredon/orgs",
        "repos_url": "https://api.github.com/users/fdecampredon/repos",
        "events_url": "https://api.github.com/users/fdecampredon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fdecampredon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 739777675,
          "node_id": "MDU6TGFiZWw3Mzk3Nzc2NzU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
          "name": "Component: Component API",
          "color": "d4c5f9",
          "default": false
        },
        {
          "id": 710332294,
          "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
          "name": "Component: Server Rendering",
          "color": "d4c5f9",
          "default": false
        },
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 139,
      "created_at": "2014-06-24T12:36:38Z",
      "updated_at": "2019-09-02T03:57:59Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "It would seriously ease the process of building something isomorphic if componentWillMount could return a promise and that react would delay rendering until that promise is resolved. I have seen attempt of doing something like that in react-router and rrouter, however giving this responsibility to each component instead of a router module would make more sense for me.\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/11347",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/11347/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/11347/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/11347/events",
      "html_url": "https://github.com/facebook/react/issues/11347",
      "id": 267902244,
      "node_id": "MDU6SXNzdWUyNjc5MDIyNDQ=",
      "number": 11347,
      "title": "RFC: Plan for custom element attributes/properties in React 17",
      "user": {
        "login": "robdodson",
        "id": 1066253,
        "node_id": "MDQ6VXNlcjEwNjYyNTM=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1066253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robdodson",
        "html_url": "https://github.com/robdodson",
        "followers_url": "https://api.github.com/users/robdodson/followers",
        "following_url": "https://api.github.com/users/robdodson/following{/other_user}",
        "gists_url": "https://api.github.com/users/robdodson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/robdodson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/robdodson/subscriptions",
        "organizations_url": "https://api.github.com/users/robdodson/orgs",
        "repos_url": "https://api.github.com/users/robdodson/repos",
        "events_url": "https://api.github.com/users/robdodson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/robdodson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 81,
      "created_at": "2017-10-24T05:28:49Z",
      "updated_at": "2019-10-02T21:07:20Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "This is meant to address #7249. The doc outlines the pros and cons of various approaches React could use to handle attributes and properties on custom elements.\r\n\r\n# TOC/Summary\r\n\r\n- Background\r\n- Proposals\r\n  * Option 1: Only set properties\r\n    + Pros\r\n      - Easy to understand/implement\r\n      - Avoids conflict with future global attributes\r\n      - Takes advantage of custom element \"upgrade\"\r\n      - Custom elements treated like any other React component\r\n    + Cons\r\n      - Possibly a breaking change\r\n      - Need ref to set attribute\r\n      - Not clear how server-side rendering would work\r\n  * Option 2: Properties-if-available\r\n    + Pros\r\n      - Non-breaking change\r\n    + Cons\r\n      - Developers need to understand the heuristic\r\n      - Falling back to attributes may conflict with future globals\r\n  * Option 3: Differentiate properties with a sigil\r\n    + Pros\r\n      - Non-breaking change that developers can opt-in to\r\n      - Similar to how other libraries handle attributes/properties\r\n      - The system is explicit\r\n    + Cons\r\n      - It’s new syntax\r\n      - Not clear how server-side rendering would work\r\n  * Option 4: Add an attributes object\r\n    + Pros\r\n      - The system is explicit\r\n      - Extending syntax may also solve issues with event handling\r\n    + Cons\r\n      - It’s new syntax\r\n      - It may be a breaking change\r\n      - It may be a larger change than any of the previous proposals\r\n  * Option 5: An API for consuming custom elements\r\n    + Pros\r\n      - The system is explicit\r\n      - Non-breaking change\r\n      - Idiomatic to React\r\n    + Cons\r\n      - Could be a lot of work for a complex component\r\n      - May bloat bundle size\r\n      - Config needs to keep pace with the component\r\n\r\n# Background\r\n\r\nWhen React tries to pass data to a custom element it always does so using HTML attributes.\r\n\r\n```jsx\r\n<x-foo bar={baz}> // same as setAttribute('bar', baz)\r\n```\r\n\r\nBecause attributes must be serialized to strings, this approach creates problems when the data being passed is an object or array. In that scenario, we end up with something like:\r\n\r\n```html\r\n<x-foo bar=\"[object Object]\">\r\n```\r\n\r\nThe workaround for this is to use a `ref` to manually set the property.\r\n\r\n```jsx\r\n<x-foo ref={el => el.bar = baz}>\r\n```\r\n\r\nThis workaround feels a bit unnecessary as the majority of custom elements being shipped today are written with libraries which automatically generate JavaScript properties that back all of their exposed attributes. And anyone hand-authoring a vanilla custom element is [encouraged to follow this practice](https://developers.google.com/web/fundamentals/web-components/best-practices#attributes-properties) as well. We'd like to ideally see runtime communication with custom elements in React use JavaScript properties by default.\r\n\r\nThis doc outlines a few proposals for how React could be updated to make this happen.\r\n\r\n# Proposals\r\n\r\n## Option 1: Only set properties\r\n\r\nRather than try to decide if a property or attribute should be set, React could *always* set properties on custom elements. React would **NOT** check to see if the property exists on the element beforehand.\r\n\r\n**Example:**\r\n\r\n```jsx\r\n<x-foo bar={baz}>\r\n```\r\n\r\nThe above code would result in React setting the `.bar` property of the `x-foo` element equal to the value of `baz`.\r\n\r\nFor camelCased property names, React could use the same style it uses today for properties like `tabIndex`.\r\n\r\n```jsx\r\n<x-foo squidInk={pasta}> // sets .squidInk = pasta\r\n```\r\n\r\n### Pros\r\n\r\n#### Easy to understand/implement\r\n\r\nThis model is simple, explicit, and dovetails with React’s [\"JavaScript-centric API to the DOM\"](https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html#why-are-we-changing-this).\r\n\r\nAny element created with libraries like Polymer or Skate will automatically generate properties to back their exposed attributes. These elements should all \"just work\" with the above approach. Developers hand-authoring vanilla components are encouraged to [back attributes with properties](https://developers.google.com/web/fundamentals/web-components/best-practices#always-accept-primitive-data-strings-numbers-booleans-as-either-attributes--or-properties) as that mirrors how *modern* (i.e. not oddballs like `<input>`) HTML5 elements (`<video>`, `<audio>`, etc.) have been implemented.\r\n\r\n#### Avoids conflict with future global attributes\r\n\r\nWhen React sets an attribute on a custom element there’s always the risk that a future version of HTML will ship a similarly named attribute and break things. This concern was [discussed with spec authors](https://github.com/w3c/webcomponents/issues/654) but there is no clear solution to the problem. Avoiding attributes entirely (except when a developer explicitly sets one using `ref`) may sidestep this issue until the browsers come up with a better solution.\r\n\r\n#### Takes advantage of custom element \"upgrade\"\r\n\r\nCustom elements can be lazily [upgraded](https://developers.google.com/web/fundamentals/web-components/customelements#upgrades) on the page and some PRPL patterns rely on this technique. During the upgrade process, a custom element can access the properties passed to it by React—even if those properties were set before the definition loaded—and use them to render initial state.\r\n\r\n#### Custom elements treated like any other React component\r\n\r\nWhen React components pass data to one another they already use properties. This would just make custom elements behave the same way.\r\n\r\n### Cons\r\n\r\n#### Possibly a breaking change\r\n\r\nIf a developer has been hand-authoring vanilla custom elements which only have an attributes API, then they will need to update their code or their app will break. The fix would be to use a `ref` to set the attribute (explained below).\r\n\r\n#### Need ref to set attribute\r\n\r\nBy changing the behavior so properties are preferred, it means developers will need to use a `ref` in order to explicitly set an attribute on a custom element.\r\n\r\n```jsx\r\n<custom-element ref={el => el.setAttribute('my-attr', val)} />\r\n```\r\n\r\nThis is just a reversal of the current behavior where developers need a `ref` in order to set a property. Since developers should rarely need to set attributes on custom elements, this seems like a reasonable trade-off.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nIt's not clear how this model would map to server-side rendering custom elements. React could assume that the properties map to similarly named attributes and attempt to set those on the server, but this is far from bulletproof and would possibly require a heuristic for things like camelCased properties -> dash-cased attributes.\r\n\r\n## Option 2: Properties-if-available\r\n\r\nAt runtime React could attempt to detect if a property is present on a custom element. If the property is present React will use it, otherwise it will fallback to setting an attribute. This is the model Preact uses to deal with custom elements.\r\n\r\n**Pseudocode implementation:**\r\n\r\n```js\r\nif (propName in element) {\r\n  element[propName] = value;\r\n} else {\r\n  element.setAttribute(propName.toLowerCase(), value);\r\n}\r\n```\r\n\r\n**Possible steps:**\r\n\r\n* If an element has a defined property, React will use it.\r\n\r\n* If an element has an undefined property, and React is trying to pass it primitive data (string/number/boolean), it will use an attribute.\r\n\r\n    * Alternative: Warn and don’t set.\r\n\r\n* If an element has an undefined property, and React is trying to pass it an object/array it will set it as a property. This is because some-attr=\"[object Object]” is not useful.\r\n\r\n    * Alternative: Warn and don’t set.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a string/number/boolean, it will use an attribute.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a object/array, it will not do anything.\r\n\r\n### Pros\r\n\r\n#### Non-breaking change\r\n\r\nIt is possible to create a custom element that only uses attributes as its interface. This authoring style is **NOT** encouraged, but it may happen regardless. If a custom element author is relying on this behavior then this change would be non-breaking for them.\r\n\r\n### Cons\r\n\r\n#### Developers need to understand the heuristic\r\n\r\nDevelopers might be confused when React sets an attribute instead of a property depending on how they’ve chosen to load their element.\r\n\r\n#### Falling back to attributes may conflict with future globals\r\n\r\nSebastian [raised a concern](https://github.com/facebook/react/issues/10399#issuecomment-320847065) that using `in` to check for the existence of a property on a custom element might accidentally detect a property on the superclass (HTMLElement).\r\n\r\nThere are also other potential conflicts with global attributes [discussed previously](#avoids-conflict-with-future-global-attributes) in this doc.\r\n\r\n## Option 3: Differentiate properties with a sigil\r\n\r\nReact could continue setting attributes on custom elements, but provide a sigil that developers could use to explicitly set properties instead. This is similar to [the approach used by Glimmer.js](https://www.emberjs.com/blog/2017/10/10/glimmer-progress-report.html#toc_component-attributes).\r\n\r\n**Glimmer example:**\r\n\r\n```html\r\n<custom-img @src=\"corgi.jpg\" @hiResSrc=\"corgi@2x.jpg\" width=\"100%\">\r\n```\r\n\r\nIn the above example, the @ sigil indicates that `src` and `hiResSrc` should pass data to the custom element using properties, and `width` should be serialized to an attribute string.\r\n\r\nBecause React components already pass data to one another using properties, there would be no need for them to use the sigil (although it would work if they did, it would just be redundant). Instead, it would primarily be used as an explicit instruction to pass data to a custom element using JavaScript properties.\r\n\r\n*h/t to @developit of Preact for suggesting this approach :)*\r\n\r\n### Pros\r\n\r\n#### Non-breaking change that developers can opt-in to\r\n\r\nAll pre-existing React + custom element apps would continue to work exactly as they have. Developers could choose if they wanted to update their code to use the new sigil style.\r\n\r\n#### Similar to how other libraries handle attributes/properties\r\n\r\nSimilar to Glimmer, both Angular and Vue use modifiers to differentiate between attributes and properties.\r\n\r\n**Vue example:**\r\n\r\n```html\r\n<!-- Vue will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element :foo=\"bar” :squid.prop=”ink”>\r\n```\r\n\r\n**Angular example:**\r\n\r\n```html\r\n<!-- Angular will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element [attr.foo]=\"bar” [squid]=”ink”>\r\n```\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n### Cons\r\n\r\n#### It’s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nShould the sigil switch to using a similarly named attribute?\r\n\r\n## Option 4: Add an attributes object\r\n\r\nReact could add additional syntax which lets authors explicitly pass data as attributes. If developers do not use this attributes object, then their data will be passed using JavaScript properties.\r\n\r\n**Example:**\r\n\r\n```jsx\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst width = '100%';\r\nconst ReactElement = <Test\r\n  foo={bar} // uses JavaScript property\r\n  attrs={{ hello, width }} // serialized to attributes\r\n/>;\r\n```\r\n\r\nThis idea was [originally proposed](https://gist.github.com/treshugart/2fb509a8828adf7fee5245bfa2a54ba7) by @treshugart, author of Skate.js, and is implemented in the [val](https://github.com/skatejs/val) library.\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n#### Extending syntax may also solve issues with event handling\r\n\r\n*Note: This is outside the scope of this document but maybe worth mentioning :)*\r\n\r\nIssue [#7901](https://github.com/facebook/react/issues/7901) requests that React bypass its synthetic event system when declarative event handlers are added to custom elements. Because custom element event names are arbitrary strings, it means they can be capitalized in any fashion. To bypass the synthetic event system today will also mean needing to come up with a heuristic for mapping event names from JSX to `addEventListener`.\r\n\r\n```js\r\n// should this listen for: 'foobar', 'FooBar', or 'fooBar'?\r\nonFooBar={handleFooBar}\r\n```\r\n\r\nHowever, if the syntax is extended to allow attributes it could also be extended to allow events as well:\r\n\r\n```js\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst SquidChanged = e => console.log('yo');\r\nconst ReactElement = <Test\r\n  foo={bar}\r\n  attrs={{ hello }}\r\n  events={{ SquidChanged}} // addEventListener('SquidChanged', …)\r\n/>;\r\n```\r\n\r\nIn this model the variable name is used as the event name. No heuristic is needed.\r\n\r\n### Cons\r\n\r\n#### It’s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### It may be a breaking change\r\n\r\nIf any components already rely on properties named `attrs` or `events`, it could break them.\r\n\r\n#### It may be a larger change than any of the previous proposals\r\n\r\nFor React 17 it may be easier to make an incremental change (like one of the previous proposals) and position this proposal as something to take under consideration for a later, bigger refactor.\r\n\r\n## Option 5: An API for consuming custom elements\r\n\r\n*This proposal was offered by @sophiebits and @gaearon from the React team*\r\n\r\nReact could create a new API for consuming custom elements that maps the element’s behavior with a configuration object.\r\n\r\n**Pseudocode example:**\r\n\r\n```js\r\nconst XFoo = ReactDOM.createCustomElementType({\r\n  element: ‘x-foo’,\r\n  ‘my-attr’: // something that tells React what to do with it\r\n  someRichDataProp: // something that tells React what to do with it\r\n});\r\n```\r\n\r\nThe above code returns a proxy component, `XFoo` that knows how to pass data to a custom element depending on the configuration you provide. You would use this proxy component in your app instead of using the custom element directly.\r\n\r\n**Example usage:**\r\n\r\n```jsx\r\n<XFoo someRichDataProp={...} />\r\n```\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React the exact behavior they want.\r\n\r\n#### Non-breaking change\r\n\r\nDevelopers can opt-in to using the object or continue using the current system.\r\n\r\n#### Idiomatic to React\r\n\r\nThis change doesn’t require new JSX syntax, and feels more like other APIs in React. For example, PropTypes (even though it’s being moved into its own package) has a somewhat similar approach.\r\n\r\n### Cons\r\n\r\n#### Could be a lot of work for a complex component\r\n\r\nPolymer’s [paper-input](https://www.webcomponents.org/element/PolymerElements/paper-input/elements/paper-input) element has 37 properties, so it would produce a very large config. If developers are using a lot of custom elements in their app, that may equal a lot of configs they need to write.\r\n\r\n#### May bloat bundle size\r\n\r\nRelated to the above point, each custom element class now incurs the cost of its definition + its config object size.\r\n\r\n*Note: I'm not 100% sure if this is true. Someone more familiar with the React build process could verify.*\r\n\r\n#### Config needs to keep pace with the component\r\n\r\nEvery time the component does a minor version revision that adds a new property, the config will need to be updated as well. That’s not difficult, but it does add maintenance. Maybe if configs are generated from source this is less of a burden, but that may mean needing to create a new tool to generate configs for each web component library.\r\n\r\n\r\ncc @sebmarkbage @gaearon @developit @treshugart @justinfagnani"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/1159",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/1159/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/1159/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/1159/events",
      "html_url": "https://github.com/facebook/react/issues/1159",
      "id": 28086808,
      "node_id": "MDU6SXNzdWUyODA4NjgwOA==",
      "number": 1159,
      "title": "Provide a way to handle browser-autocompleted form values on controlled components",
      "user": {
        "login": "ericflo",
        "id": 1228,
        "node_id": "MDQ6VXNlcjEyMjg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1228?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericflo",
        "html_url": "https://github.com/ericflo",
        "followers_url": "https://api.github.com/users/ericflo/followers",
        "following_url": "https://api.github.com/users/ericflo/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericflo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericflo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericflo/subscriptions",
        "organizations_url": "https://api.github.com/users/ericflo/orgs",
        "repos_url": "https://api.github.com/users/ericflo/repos",
        "events_url": "https://api.github.com/users/ericflo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericflo/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 75,
      "created_at": "2014-02-22T02:05:11Z",
      "updated_at": "2019-10-04T22:34:54Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "When there's a controlled component for form names that the user has saved in their browser (common with username/password fields), the browser will sometimes render the page with values in those fields without firing onChange events.  If the user submits the form, the component state does not reflect what is showing to the user.\n\nIn experimenting with this, it appears that the data is there on load (tested by logging this.refs.myinput.getDOMNode().value)\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/11387",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/11387/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/11387/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/11387/events",
      "html_url": "https://github.com/facebook/react/issues/11387",
      "id": 269148824,
      "node_id": "MDU6SXNzdWUyNjkxNDg4MjQ=",
      "number": 11387,
      "title": "createPortal: support option to stop propagation of events in React tree",
      "user": {
        "login": "kib357",
        "id": 347668,
        "node_id": "MDQ6VXNlcjM0NzY2OA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/347668?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kib357",
        "html_url": "https://github.com/kib357",
        "followers_url": "https://api.github.com/users/kib357/followers",
        "following_url": "https://api.github.com/users/kib357/following{/other_user}",
        "gists_url": "https://api.github.com/users/kib357/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kib357/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kib357/subscriptions",
        "organizations_url": "https://api.github.com/users/kib357/orgs",
        "repos_url": "https://api.github.com/users/kib357/repos",
        "events_url": "https://api.github.com/users/kib357/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kib357/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 71,
      "created_at": "2017-10-27T15:36:49Z",
      "updated_at": "2019-08-27T11:54:52Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer`\r\n\r\n**What is the current behavior?**\r\nWe cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events.\r\n\r\n**What is the expected behavior?**\r\ncreatePortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13206",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13206/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13206/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13206/events",
      "html_url": "https://github.com/facebook/react/issues/13206",
      "id": 341142665,
      "node_id": "MDU6SXNzdWUzNDExNDI2NjU=",
      "number": 13206,
      "title": "[Umbrella] Releasing Suspense",
      "user": {
        "login": "acdlite",
        "id": 3624098,
        "node_id": "MDQ6VXNlcjM2MjQwOTg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710615342,
          "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
          "name": "Type: Umbrella",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 64,
      "created_at": "2018-07-13T20:01:03Z",
      "updated_at": "2019-07-29T17:04:01Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "Let's use this issue to track the remaining tasks for releasing Suspense to open source.\r\n\r\n## Initial release (MVP)\r\n\r\n### Core\r\n- [x] API to read context from within any render phase function (@acdlite) [#13139]\r\n- [x] Hide timed-out content instead of deleting it  (@acdlite) [#13120]\r\n- [ ] Automatic injection of context providers per React root (@acdlite) [#13293]\r\n- [ ] Remove `unstable_` prefix from `AsyncMode` (maybe?)\r\n- [ ] Support for synchronous thenables, and for promises that resolve before the render phase is complete.\r\n  - [ ] Confirm that a synchronous thenable that throws an error is handled correctly\r\n- [ ] Confirm it works with `<div hidden>` [#13089]\r\n- [ ] Why does clicking on several detail links in the fixture one by one eventually causes a big placeholder even if I wait for each of them for less than the placeholder delay before clicking the next one ([see tweet](https://mobile.twitter.com/niklasbostrom/status/1025278135082934272))?\r\n\r\n### Simple Cache Provider\r\n- [ ] Cache invalidation (@acdlite) [#13337]\r\n- [ ] Subscriptions (@acdlite) [#13337]\r\n- [ ] Decide on actual name\r\n\r\n### Code splitting\r\n- [x] Support promise as a component type\r\n- [x] (maybe) Open source `lazyLoadComponent`?\r\n\r\n### Test renderer\r\n- [ ] Finalize public APIs for `flushAll`, `yield`, etc\r\n  - Tentative plan is to publish custom matchers for each of the major testing frameworks, a la #13236.\r\n\r\n### Docs\r\n- [ ] Blog post\r\n- [ ] `React.Placeholder`\r\n- [ ] simple-cache-provider\r\n- [ ] Unnamed code-splitting library\r\n\r\n## Follow ups\r\n\r\n### Soft expiration (https://github.com/facebook/react/issues/14248)\r\n- [ ] Implement an API for in-place loading indicators that aren't ancestors\r\n- [ ] Make sure there's a way to avoid flashing the inline spinner if it's fast enough\r\n\r\n### Streaming server renderer\r\n- [ ] Implement a streaming server renderer like the one in @acdlite's ZEIT talk\r\n- [ ] Partial hydration\r\n\r\n------\r\n\r\nRelated: Time Slicing Umbrella (https://github.com/facebook/react/issues/13306)"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/285",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/285/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/285/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/285/events",
      "html_url": "https://github.com/facebook/react/issues/285",
      "id": 18382292,
      "node_id": "MDU6SXNzdWUxODM4MjI5Mg==",
      "number": 285,
      "title": "Declarative API for installing global DOM event handlers",
      "user": {
        "login": "sophiebits",
        "id": 6820,
        "node_id": "MDQ6VXNlcjY4MjA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sophiebits",
        "html_url": "https://github.com/sophiebits",
        "followers_url": "https://api.github.com/users/sophiebits/followers",
        "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
        "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
        "organizations_url": "https://api.github.com/users/sophiebits/orgs",
        "repos_url": "https://api.github.com/users/sophiebits/repos",
        "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sophiebits/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 58,
      "created_at": "2013-08-21T21:41:26Z",
      "updated_at": "2019-03-26T17:25:23Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "body": "#284 reminded me that one thing I've sometimes wanted is to install a handler on window for `keypress` (for keyboard shortcuts) or `scroll`. Right now I can just do `window.addEventListener` in `componentDidMount` but since React is listening already, it would be nice if there were some way for me to intercept those events. (In addition, receiving normalized synthetic events is generally more useful.)\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/6436",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/6436/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/6436/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/6436/events",
      "html_url": "https://github.com/facebook/react/issues/6436",
      "id": 146710693,
      "node_id": "MDU6SXNzdWUxNDY3MTA2OTM=",
      "number": 6436,
      "title": "Support Passive Event Listeners",
      "user": {
        "login": "sebmarkbage",
        "id": 63648,
        "node_id": "MDQ6VXNlcjYzNjQ4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sebmarkbage",
        "html_url": "https://github.com/sebmarkbage",
        "followers_url": "https://api.github.com/users/sebmarkbage/followers",
        "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
        "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
        "repos_url": "https://api.github.com/users/sebmarkbage/repos",
        "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 270986513,
          "node_id": "MDU6TGFiZWwyNzA5ODY1MTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
          "name": "Type: Big Picture",
          "color": "61dafb",
          "default": false
        },
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 57,
      "created_at": "2016-04-07T18:42:47Z",
      "updated_at": "2019-04-03T12:25:14Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n\nIt would be good to have everything be passive by default and only opt-in to active when needed. E.g. you could listen to text input events but only preventDefault or used controlled behavior when you have active listeners.\n\nSimilarly, we could unify this with React Native's threading model. E.g. one thing we could do there is synchronously block the UI thread when there are active listeners such as handling keystrokes.\n\ncc @vjeux @ide\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/7901",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/7901/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/7901/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/7901/events",
      "html_url": "https://github.com/facebook/react/issues/7901",
      "id": 181504195,
      "node_id": "MDU6SXNzdWUxODE1MDQxOTU=",
      "number": 7901,
      "title": "Bypass synthetic event system for Web Component events",
      "user": {
        "login": "staltz",
        "id": 90512,
        "node_id": "MDQ6VXNlcjkwNTEy",
        "avatar_url": "https://avatars3.githubusercontent.com/u/90512?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/staltz",
        "html_url": "https://github.com/staltz",
        "followers_url": "https://api.github.com/users/staltz/followers",
        "following_url": "https://api.github.com/users/staltz/following{/other_user}",
        "gists_url": "https://api.github.com/users/staltz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/staltz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/staltz/subscriptions",
        "organizations_url": "https://api.github.com/users/staltz/orgs",
        "repos_url": "https://api.github.com/users/staltz/repos",
        "events_url": "https://api.github.com/users/staltz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/staltz/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 55,
      "created_at": "2016-10-06T19:27:26Z",
      "updated_at": "2019-06-17T23:28:05Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "To use a Web Component in React, you must directly attach an event listener to the React ref for that WC. We could change the implementation so that when React detects a custom element (tag names with dashes, like `my-component`), it will bypass the synthetic event system (and the whitelist) and just attach the event listener on the element itself.\n\nWhy bypass the synthetic event system? Because _anyway_ we already need to bypass it manually when using a Web Component. I'm not so familiar with the React codebase, but this naive approach seems to work. Whoever uses Web Components in React can be responsible for whatever downsides that would cause, maybe in performance, I don't know. They are already having those (supposed) downsides, this issue is just about the convenience of WC usage inside React.\n\nI was about to send a PR for this, but thought of opening an issue. I looked through the issues and didn't see any existing one related to the handling of WC events.\n\n**What is the current behavior?**\n\nA WC custom event (e.g. `flipend`) must be handled by attaching the event listener directly to the element in componentDidMount using a ref.\n\nhttp://jsbin.com/yutocopasu/1/edit?js,output\n\nReact v15.1.0\n\n``` js\nclass HelloMessage extends React.Component {\n  handleHelloClick() {\n    this.refs['foo'].toggle();\n  }\n\n  handleFlipend(ev) {\n    console.log('Handle flip end');\n  }\n\n  componentDidMount() {\n    this.refs['foo'].addEventListener('flipend', ev =>\n      this.handleFlipend(ev);\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div onClick={ev => this.handleHelloClick()}>\n          Hello {this.props.name}, click me!\n        </div>\n        <brick-flipbox class=\"demo\" ref=\"foo\">\n          <div>front</div>\n          <div>back</div>\n        </brick-flipbox>\n      </div>\n    );\n  }\n}\n```\n\n**What is the expected behavior?**\n\nA WC custom event can be handled with `onMyEvent={ev => this.handleMyEvent(ev)}` on the ReactElement corresponding to the WC.\n\n``` js\nclass HelloMessage extends React.Component {\n  handleHelloClick() {\n    this.refs['foo'].toggle();\n  }\n\n  handleFlipend(ev) {\n    console.log('Handle flip end');\n  }\n\n  render() {\n    return (\n      <div>\n        <div onClick={ev => this.handleHelloClick()}>\n          Hello {this.props.name}, click me!\n        </div>\n        <brick-flipbox onFlipend={ev => this.handleFlipend(ev)} class=\"demo\" ref=\"foo\">\n          <div>front</div>\n          <div>back</div>\n        </brick-flipbox>\n      </div>\n    );\n  }\n}\n```\n\nPS: this snippet above still has the `ref`, but for unrelated reasons. Ideally we wouldn't need refs for handling events of WCs.\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/10441",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/10441/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/10441/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/10441/events",
      "html_url": "https://github.com/facebook/react/issues/10441",
      "id": 249669043,
      "node_id": "MDU6SXNzdWUyNDk2NjkwNDM=",
      "number": 10441,
      "title": "Cross-origin error passed to componentDidCatch incorrectly",
      "user": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "fbca04",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 54,
      "created_at": "2017-08-11T15:25:18Z",
      "updated_at": "2018-07-12T08:36:52Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tl;dr React is passing \"A cross-origin error was thrown\" to `componentDidCatch` when there are no cross-origin scripts.\r\n\r\nSee [this discussion thread](https://github.com/facebook/react/pull/10353#issuecomment-321528685) and [this repro case](https://github.com/tessin/tessin-mini).\r\n\r\nI was able to confirm the behavior. A quick look at `onError` showed a null `event.error`."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/14927",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/14927/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/14927/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/14927/events",
      "html_url": "https://github.com/facebook/react/issues/14927",
      "id": 413349220,
      "node_id": "MDU6SXNzdWU0MTMzNDkyMjA=",
      "number": 14927,
      "title": "useLayoutEffect in ssr",
      "user": {
        "login": "dimensi",
        "id": 11390039,
        "node_id": "MDQ6VXNlcjExMzkwMDM5",
        "avatar_url": "https://avatars0.githubusercontent.com/u/11390039?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dimensi",
        "html_url": "https://github.com/dimensi",
        "followers_url": "https://api.github.com/users/dimensi/followers",
        "following_url": "https://api.github.com/users/dimensi/following{/other_user}",
        "gists_url": "https://api.github.com/users/dimensi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dimensi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dimensi/subscriptions",
        "organizations_url": "https://api.github.com/users/dimensi/orgs",
        "repos_url": "https://api.github.com/users/dimensi/repos",
        "events_url": "https://api.github.com/users/dimensi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dimensi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 40929155,
          "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
          "name": "Type: Question",
          "color": "cc317c",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 51,
      "created_at": "2019-02-22T10:52:29Z",
      "updated_at": "2019-10-13T08:27:05Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Hi, I do not understand the situation with this hook a bit. I use this hook to perform the animation synchronously with the state update, if I use useEffect, then I have jumps in the animation, because the animation library does not have time to start. Also, the documentation states that useLayoutEffect runs on the same phase as componentDidMount (that is, on the client side), and here my server issues complaints to me about my code. Why is that?\r\n\r\nhttps://codesandbox.io/s/oo47nj9mk9\r\n\r\n_Originally posted by @dimensi in https://github.com/facebook/react/pull/14596#issuecomment-466023638_"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/11503",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/11503/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/11503/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/11503/events",
      "html_url": "https://github.com/facebook/react/issues/11503",
      "id": 272615283,
      "node_id": "MDU6SXNzdWUyNzI2MTUyODM=",
      "number": 11503,
      "title": "Formalize top-level ES exports",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 71502270,
          "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
          "name": "Component: Build Infrastructure",
          "color": "f9d0c4",
          "default": false
        },
        {
          "id": 763742499,
          "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
          "name": "Type: Breaking Change",
          "color": "aa2608",
          "default": false
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 49,
      "created_at": "2017-11-09T15:56:42Z",
      "updated_at": "2019-07-23T14:21:20Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "Currently we only ship CommonJS versions of all packages. However we might want to ship them as ESM in the future (https://github.com/facebook/react/issues/10021).\r\n\r\nWe can't quite easily do this because we haven't really decided on what top-level ES exports would look like from each package. For example, does `react` have a bunch of named exports, but also a default export called `React`? Should we encourage people to `import *` for better tree shaking? What about `react-test-renderer/shallow` that currently exports a class (and thus would start failing in Node were it converted to be a default export)?"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/6410",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/6410/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/6410/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/6410/events",
      "html_url": "https://github.com/facebook/react/issues/6410",
      "id": 145887079,
      "node_id": "MDU6SXNzdWUxNDU4ODcwNzk=",
      "number": 6410,
      "title": "onFocusIn/onFocusOut events",
      "user": {
        "login": "sophiebits",
        "id": 6820,
        "node_id": "MDQ6VXNlcjY4MjA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sophiebits",
        "html_url": "https://github.com/sophiebits",
        "followers_url": "https://api.github.com/users/sophiebits/followers",
        "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
        "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
        "organizations_url": "https://api.github.com/users/sophiebits/orgs",
        "repos_url": "https://api.github.com/users/sophiebits/repos",
        "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sophiebits/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 49,
      "created_at": "2016-04-05T04:54:27Z",
      "updated_at": "2019-09-04T01:07:12Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "body": "Like mouse enter/leave, these are almost always what you want, not the `onFocus` and `onBlur` events we currently expose. I run into this semi-frequently when actually doing product work. We should add them.\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/15157",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/15157/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/15157/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/15157/events",
      "html_url": "https://github.com/facebook/react/pull/15157",
      "id": 422994974,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjYyNjY0OTE1",
      "number": 15157,
      "title": "Clean up unmounted fiber references for GC",
      "user": {
        "login": "paulshen",
        "id": 2266187,
        "node_id": "MDQ6VXNlcjIyNjYxODc=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/2266187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paulshen",
        "html_url": "https://github.com/paulshen",
        "followers_url": "https://api.github.com/users/paulshen/followers",
        "following_url": "https://api.github.com/users/paulshen/following{/other_user}",
        "gists_url": "https://api.github.com/users/paulshen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/paulshen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/paulshen/subscriptions",
        "organizations_url": "https://api.github.com/users/paulshen/orgs",
        "repos_url": "https://api.github.com/users/paulshen/repos",
        "events_url": "https://api.github.com/users/paulshen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/paulshen/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 47,
      "created_at": "2019-03-19T23:13:11Z",
      "updated_at": "2019-09-05T22:53:28Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/15157",
        "html_url": "https://github.com/facebook/react/pull/15157",
        "diff_url": "https://github.com/facebook/react/pull/15157.diff",
        "patch_url": "https://github.com/facebook/react/pull/15157.patch"
      },
      "body": "This change cleans up Fiber pointers to help with garbage collection.\r\n\r\nThis clears Fiber's `stateNode` pointer when committing unmounts. This removes a potential pointer back to host nodes (e.g. DOM) and component instances.\r\n\r\nThis cleans `nextEffect` pointer when we're done processing the effect chain (either when flushing passive effects or after committing layout effects). Without clearing this, it's possible to retain effect pointers to unmounted nodes.\r\n\r\nA continuation of #14218. Detaching `nextEffect` needs to happen after [committing host effects](https://github.com/facebook/react/blob/daeda44d8f5abdb7354742bb69a967302d34d7f9/packages/react-reconciler/src/ReactFiberScheduler.js#L729) because the effect chain is needed for lifecycles and ref callbacks."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/15849",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/15849/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/15849/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/15849/events",
      "html_url": "https://github.com/facebook/react/pull/15849",
      "id": 453983331,
      "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg2NTI5NDY2",
      "number": 15849,
      "title": "[Flare] First pass at an implementation of experimental FocusManager API",
      "user": {
        "login": "devongovett",
        "id": 19409,
        "node_id": "MDQ6VXNlcjE5NDA5",
        "avatar_url": "https://avatars0.githubusercontent.com/u/19409?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/devongovett",
        "html_url": "https://github.com/devongovett",
        "followers_url": "https://api.github.com/users/devongovett/followers",
        "following_url": "https://api.github.com/users/devongovett/following{/other_user}",
        "gists_url": "https://api.github.com/users/devongovett/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/devongovett/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/devongovett/subscriptions",
        "organizations_url": "https://api.github.com/users/devongovett/orgs",
        "repos_url": "https://api.github.com/users/devongovett/repos",
        "events_url": "https://api.github.com/users/devongovett/events{/privacy}",
        "received_events_url": "https://api.github.com/users/devongovett/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 46,
      "created_at": "2019-06-10T03:30:16Z",
      "updated_at": "2019-06-27T03:40:33Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/15849",
        "html_url": "https://github.com/facebook/react/pull/15849",
        "diff_url": "https://github.com/facebook/react/pull/15849.diff",
        "patch_url": "https://github.com/facebook/react/pull/15849.patch"
      },
      "body": "This is a first pass at implementing the `FocusManager` API specified in https://github.com/reactjs/rfcs/pull/109. It goes along with the already implemented `FocusScope` in react-events.\r\n\r\nI adjusted the API slightly, and will be updating the RFC to match. In particular, the `focusNext` and `focusNextTabStop` methods have been merged, along with the corresponding previous methods. There is now an options object that can be passed to specify whether the element must be tabbable or only focusable. In addition, there are options to enable wrapping behavior at the ends of a scope, along with starting the search from a particular element rather than only `document.activeElement`. The methods also return the element they focused if any, which allows the calling code to do something with that information.\r\n\r\nThe API is now:\r\n\r\n```javascript\r\ntype FocusManagerOptions = {\r\n  from?: HTMLElement,\r\n  tabbable?: boolean,\r\n  wrap?: boolean,\r\n};\r\n\r\ninterface FocusManager {\r\n  focusNext(opts: FocusManagerOptions): HTMLElement,\r\n  focusPrevious(opts: FocusManagerOptions): HTMLElement\r\n}\r\n```\r\n\r\nPerhaps we will also want `focusFirst` and `focusLast` methods at some point as well. Happy to hear whatever feedback you have on the API.\r\n\r\nMost of the implementation is moved from the existing code for `FocusScope`. There were a few things I wasn't sure about though:\r\n\r\n* How it should be exposed. For now, it is available as `ReactDOM.unstable_FocusManager` if the event API feature flag is enabled. Perhaps it should be exposed as part of `react-events` instead of `react-dom`, but I didn't see a good way of exposing the necessary internals.\r\n* How to detect `FocusScope` event components in the tree. For now, I added an `isFocusScope` option to the event responder, but this is kind of a hack. I didn't want react-dom to have a dependency on react-events, so I wasn't sure how else to do it.\r\n* What should happen if you call `focusNext({from: node})`, where node contains focusable children? Should it focus the first item within that node, or go to the next focusable element within a sibling?\r\n\r\nThanks in advance for your feedback! 🙏"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/10474",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/10474/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/10474/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/10474/events",
      "html_url": "https://github.com/facebook/react/issues/10474",
      "id": 250734072,
      "node_id": "MDU6SXNzdWUyNTA3MzQwNzI=",
      "number": 10474,
      "title": "The fake event trick for rethrowing errors in DEV fires unexpected global error handlers and makes testing harder",
      "user": {
        "login": "brandonbloom",
        "id": 119164,
        "node_id": "MDQ6VXNlcjExOTE2NA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/119164?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandonbloom",
        "html_url": "https://github.com/brandonbloom",
        "followers_url": "https://api.github.com/users/brandonbloom/followers",
        "following_url": "https://api.github.com/users/brandonbloom/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandonbloom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandonbloom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandonbloom/subscriptions",
        "organizations_url": "https://api.github.com/users/brandonbloom/orgs",
        "repos_url": "https://api.github.com/users/brandonbloom/repos",
        "events_url": "https://api.github.com/users/brandonbloom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandonbloom/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 45,
      "created_at": "2017-08-16T19:28:44Z",
      "updated_at": "2019-01-29T08:07:08Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I'm trying to make use of componentDidCatch in the React 16 beta. I already had a global window error handler which was working fine, but it unexpectedly catches errors that I would expect componentDidCatch to have handled. That is, component-local errors are being treated as window-global errors in dev builds.\r\n\r\nThe problem seems to stem from `invokeGuardedCallbackDev` in `ReactErrorUtils.js`. I think that this entire `__DEV__` block of code is problematic. The stated rational is:\r\n\r\n```\r\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\r\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\r\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\r\n  // functions in invokeGuardedCallback, and the production version of\r\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\r\n  // like caught exceptions, and the DevTools won't pause unless the developer\r\n  // takes the extra step of enabling pause on caught exceptions. This is\r\n  // untintuitive, though, because even though React has caught the error, from\r\n  // the developer's perspective, the error is uncaught.\r\n```\r\n\r\nThis is misguided because it's not about pausing on exceptions, it's about \"pause on _uncaught_ exceptions.\" However, `componentDidCatch` makes exceptions _caught_!\r\n\r\nRather than switching on prod vs dev and using try/catch in prod and window's error handler in dev, React should always use try/catch, but rethrow if you reach the root without hitting a componentDidCatch handler. This would preserve the correct \"pause on uncaught exceptions\" behavior without messing with global error handlers."
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/12063",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/12063/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/12063/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/12063/events",
      "html_url": "https://github.com/facebook/react/pull/12063",
      "id": 290238331,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MTY0MTU0ODM5",
      "number": 12063,
      "title": "DOM diff and component stack in SSR hydrate mismatch warnings (#10085)",
      "user": {
        "login": "sompylasar",
        "id": 498274,
        "node_id": "MDQ6VXNlcjQ5ODI3NA==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/498274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sompylasar",
        "html_url": "https://github.com/sompylasar",
        "followers_url": "https://api.github.com/users/sompylasar/followers",
        "following_url": "https://api.github.com/users/sompylasar/following{/other_user}",
        "gists_url": "https://api.github.com/users/sompylasar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sompylasar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sompylasar/subscriptions",
        "organizations_url": "https://api.github.com/users/sompylasar/orgs",
        "repos_url": "https://api.github.com/users/sompylasar/repos",
        "events_url": "https://api.github.com/users/sompylasar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sompylasar/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 44,
      "created_at": "2018-01-21T01:26:08Z",
      "updated_at": "2018-11-06T02:56:39Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/12063",
        "html_url": "https://github.com/facebook/react/pull/12063",
        "diff_url": "https://github.com/facebook/react/pull/12063.diff",
        "patch_url": "https://github.com/facebook/react/pull/12063.patch"
      },
      "body": "Renders DOM attributes in the tags mentioned in the warnings. Borrows the idea and partially implementation of `getNodeSignature` from @giles-v https://github.com/facebook/react/pull/12115\r\n\r\nRenders DOM diff and component stack showing visually the location where the hydration failed. Example warning with a diff (see [the `fixtures/ssr`](https://github.com/facebook/react/pull/12063/files#diff-5ec2d35d1f0d9ccc2f3a4a53d0615ba4) and [the tests](https://github.com/facebook/react/pull/12063/files#diff-1ee0c467f9deb87ae13e737c58c4ac34) for more warning examples):\r\n```\r\nWarning: Expected server HTML to contain a matching <div> in <div>.\r\n\r\n  <div>\r\n    {'nested'}\r\n    <!-- -->\r\n    {' '}\r\n    <p>children <b>text</b></p>\r\n+   <div>{['children ', …]}</div>\r\n  </div>\r\n\r\n    in div (at SSRMismatchTest.js:280)\r\n    in div (at SSRMismatchTest.js:275)\r\n    in div (at SSRMismatchTest.js:308)\r\n    in SSRMismatchTest (at App.js:14)\r\n    in div (at App.js:11)\r\n    in body (at Chrome.js:17)\r\n    in html (at Chrome.js:9)\r\n    in Chrome (at App.js:10)\r\n    in App (at index.js:8)\r\n```\r\n<img width=\"480\" alt=\"react-fixtures-ssr-example\" src=\"https://user-images.githubusercontent.com/498274/41187398-263b17e8-6b5d-11e8-8eae-57556babafc9.png\">\r\n\r\n\r\nRequires changes to ReactFiberReconciler interface functions that handle hydration errors to distinguish insertion from replacement and show insertion as one added line in the diff; show replacement as one removed, one added line, at correct position among the parentInstance's DOM children:\r\n- add `index` (use `fiber.index`) to point at which child node the insertion or replacement occurs;\r\n- add `isReplaced` to distinguish insertion from replacement.\r\n\r\n<details>\r\n<summary>\r\nThe latest screen recording from <code>fixtures/ssr</code> (7.8MB – click to expand)\r\n</summary>\r\n\r\n![react-fixtures-ssr-10mb](https://user-images.githubusercontent.com/498274/41187303-53d64b02-6b5b-11e8-9730-729dd2817d12.gif)\r\n\r\n</details>\r\n\r\n------\r\n\r\n<details><summary>Previous revisions</summary>\r\n\r\n```\r\nWarning: Expected server HTML to contain a matching <div>{['children ', …]}</div> in <div>nested<!-- --> <p>children <b>text</b></p></div>.\r\n  <div>\r\n    {'nested'}\r\n    {' '}\r\n    <p>children <b>text</b></p>\r\n+   <div>{['children ', …]}</div>\r\n  </div>\r\n    in div (at SSRMismatchTest.js:280)\r\n    in div (at SSRMismatchTest.js:275)\r\n    in div (at SSRMismatchTest.js:308)\r\n    in SSRMismatchTest (at App.js:14)\r\n    in div (at App.js:11)\r\n    in body (at Chrome.js:17)\r\n    in html (at Chrome.js:9)\r\n    in Chrome (at App.js:10)\r\n    in App (at index.js:8)\r\n```\r\n\r\nExtends the proof-of-concept at commit 6c425e7b90cd61f1124c566b26fa2a5d00261b1b\r\n\r\n![react-ssr-warning-diff](https://user-images.githubusercontent.com/498274/36652198-11bb46fe-1a62-11e8-9fa2-a612827d1463.gif)\r\n\r\n------\r\n\r\n* Added textual component stack to the hydrate mismatch warnings\r\n* Added DOM hydrate mismatch test cases to fixtures/ssr\r\n\r\nExample warning:\r\n```\r\nWarning: Expected server HTML to contain a matching <p> in <div>.\r\n    in p (at SSRMismatchTest.js:40)\r\n    in div (at SSRMismatchTest.js:39)\r\n    in div (at SSRMismatchTest.js:46)\r\n    in SSRMismatchTest (at App.js:14)\r\n    in div (at App.js:11)\r\n    in body (at Chrome.js:17)\r\n    in html (at Chrome.js:9)\r\n    in Chrome (at App.js:10)\r\n    in App (at index.js:8)\r\n```\r\n\r\n![react-ssr-mismatch](https://user-images.githubusercontent.com/498274/35189753-a3e6eefc-fe06-11e7-9a15-216bcf4a6e83.gif)\r\n\r\n</details>\r\n\r\n------\r\n\r\nFixes https://github.com/facebook/react/issues/10085"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/3926",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/3926/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/3926/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/3926/events",
      "html_url": "https://github.com/facebook/react/issues/3926",
      "id": 78854591,
      "node_id": "MDU6SXNzdWU3ODg1NDU5MQ==",
      "number": 3926,
      "title": "Change event fires extra times before IME composition ends",
      "user": {
        "login": "chenxsan",
        "id": 1091472,
        "node_id": "MDQ6VXNlcjEwOTE0NzI=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1091472?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chenxsan",
        "html_url": "https://github.com/chenxsan",
        "followers_url": "https://api.github.com/users/chenxsan/followers",
        "following_url": "https://api.github.com/users/chenxsan/following{/other_user}",
        "gists_url": "https://api.github.com/users/chenxsan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chenxsan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chenxsan/subscriptions",
        "organizations_url": "https://api.github.com/users/chenxsan/orgs",
        "repos_url": "https://api.github.com/users/chenxsan/repos",
        "events_url": "https://api.github.com/users/chenxsan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chenxsan/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 43,
      "created_at": "2015-05-21T06:30:30Z",
      "updated_at": "2019-10-24T09:39:27Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "### Extra details\r\n\r\n* Similar discussion with extra details and reproducing analysis: https://github.com/facebook/react/issues/8683\r\n* Previous attempt to fix it: https://github.com/facebook/react/pull/8438 (includes some unit tests, but sufficient to be confident in the fix)\r\n\r\n------\r\n\r\n### Original Issue\r\n\r\n\r\nWhen I was trying this [example](https://jsfiddle.net/reactjs/n47gckhr/light/) from https://facebook.github.io/react/blog/2013/11/05/thinking-in-react.html, any Chinese characters inputted by Chinese pinyin input method would fire too many renders like:\r\n\r\n![screen shot 2015-05-21 at 14 04 36](https://cloud.githubusercontent.com/assets/1091472/7742565/2c8625b0-ffc3-11e4-8ac2-d7eb22a3aef3.png)\r\n\r\nActually I would expect those not to fire before I confirm the Chinese character.\r\n\r\nThen I tried another kind of input method - wubi input method, I got this:\r\n\r\n![screen shot 2015-05-21 at 14 17 15](https://cloud.githubusercontent.com/assets/1091472/7742657/42c27bac-ffc4-11e4-8a3a-7d4550e88a59.png)\r\n\r\nIt's weird too. So I did a test [in jQuery](http://jsbin.com/yepogahobo/1/edit?html,js,console,output):\r\n\r\n![screen shot 2015-05-21 at 14 05 12](https://cloud.githubusercontent.com/assets/1091472/7742591/71da6842-ffc3-11e4-9d7a-a8438721029c.png)\r\n\r\nOnly after I press the space bar to confirm the character, the `keyup` event would fire.\r\n\r\nI know it might be different between the implementation of jQuery `keyup` and react `onChange` , but I would expect the way how jQuery `keyup` handles Chinese characters instead of react's `onChange`.\r\n"
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/14099",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/14099/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/14099/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/14099/events",
      "html_url": "https://github.com/facebook/react/issues/14099",
      "id": 377440465,
      "node_id": "MDU6SXNzdWUzNzc0NDA0NjU=",
      "number": 14099,
      "title": "useCallback() invalidates too often in practice",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1109410193,
          "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
          "name": "Component: Hooks",
          "color": "c2f27b",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 41,
      "created_at": "2018-11-05T15:06:53Z",
      "updated_at": "2019-10-14T14:32:58Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "This is related to https://github.com/facebook/react/issues/14092, https://github.com/facebook/react/issues/14066, https://github.com/reactjs/rfcs/issues/83, and some other issues.\r\n\r\nThe problem is that we often want to avoid invalidating a callback (e.g. to preserve shallow equality below or to avoid re-subscriptions in the effects). But if it depends on props or state, it's likely it'll invalidate too often. See https://github.com/facebook/react/issues/14092#issuecomment-435907249 for current workarounds.\r\n\r\n`useReducer` doesn't suffer from this because the reducer is evaluated directly in the render phase. @sebmarkbage had an idea about giving `useCallback` similar semantics but it'll likely require complex implementation work. Seems like we'd have to do _something_ like this though.\r\n\r\nI'm filing this just to acknowledge the issue exists, and to track further work on this."
    }
  ]